// Generated by view binder compiler. Do not edit!
package com.example.dialastocktaker.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.dialastocktaker.R;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityRegisterBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ImageButton btnBack;

  @NonNull
  public final Button btnRegister;

  @NonNull
  public final TextInputEditText etConfirmPassword;

  @NonNull
  public final TextInputEditText etContactNumber;

  @NonNull
  public final TextInputEditText etName;

  @NonNull
  public final TextInputEditText etPassword;

  @NonNull
  public final Spinner spinnerRole;

  @NonNull
  public final TextInputLayout tilConfirmPassword;

  @NonNull
  public final TextInputLayout tilContactNumber;

  @NonNull
  public final TextInputLayout tilName;

  @NonNull
  public final TextInputLayout tilPassword;

  @NonNull
  public final TextView tvSubtitle;

  @NonNull
  public final TextView tvTitle;

  private ActivityRegisterBinding(@NonNull ConstraintLayout rootView, @NonNull ImageButton btnBack,
      @NonNull Button btnRegister, @NonNull TextInputEditText etConfirmPassword,
      @NonNull TextInputEditText etContactNumber, @NonNull TextInputEditText etName,
      @NonNull TextInputEditText etPassword, @NonNull Spinner spinnerRole,
      @NonNull TextInputLayout tilConfirmPassword, @NonNull TextInputLayout tilContactNumber,
      @NonNull TextInputLayout tilName, @NonNull TextInputLayout tilPassword,
      @NonNull TextView tvSubtitle, @NonNull TextView tvTitle) {
    this.rootView = rootView;
    this.btnBack = btnBack;
    this.btnRegister = btnRegister;
    this.etConfirmPassword = etConfirmPassword;
    this.etContactNumber = etContactNumber;
    this.etName = etName;
    this.etPassword = etPassword;
    this.spinnerRole = spinnerRole;
    this.tilConfirmPassword = tilConfirmPassword;
    this.tilContactNumber = tilContactNumber;
    this.tilName = tilName;
    this.tilPassword = tilPassword;
    this.tvSubtitle = tvSubtitle;
    this.tvTitle = tvTitle;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityRegisterBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityRegisterBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_register, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityRegisterBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnBack;
      ImageButton btnBack = ViewBindings.findChildViewById(rootView, id);
      if (btnBack == null) {
        break missingId;
      }

      id = R.id.btnRegister;
      Button btnRegister = ViewBindings.findChildViewById(rootView, id);
      if (btnRegister == null) {
        break missingId;
      }

      id = R.id.etConfirmPassword;
      TextInputEditText etConfirmPassword = ViewBindings.findChildViewById(rootView, id);
      if (etConfirmPassword == null) {
        break missingId;
      }

      id = R.id.etContactNumber;
      TextInputEditText etContactNumber = ViewBindings.findChildViewById(rootView, id);
      if (etContactNumber == null) {
        break missingId;
      }

      id = R.id.etName;
      TextInputEditText etName = ViewBindings.findChildViewById(rootView, id);
      if (etName == null) {
        break missingId;
      }

      id = R.id.etPassword;
      TextInputEditText etPassword = ViewBindings.findChildViewById(rootView, id);
      if (etPassword == null) {
        break missingId;
      }

      id = R.id.spinnerRole;
      Spinner spinnerRole = ViewBindings.findChildViewById(rootView, id);
      if (spinnerRole == null) {
        break missingId;
      }

      id = R.id.tilConfirmPassword;
      TextInputLayout tilConfirmPassword = ViewBindings.findChildViewById(rootView, id);
      if (tilConfirmPassword == null) {
        break missingId;
      }

      id = R.id.tilContactNumber;
      TextInputLayout tilContactNumber = ViewBindings.findChildViewById(rootView, id);
      if (tilContactNumber == null) {
        break missingId;
      }

      id = R.id.tilName;
      TextInputLayout tilName = ViewBindings.findChildViewById(rootView, id);
      if (tilName == null) {
        break missingId;
      }

      id = R.id.tilPassword;
      TextInputLayout tilPassword = ViewBindings.findChildViewById(rootView, id);
      if (tilPassword == null) {
        break missingId;
      }

      id = R.id.tvSubtitle;
      TextView tvSubtitle = ViewBindings.findChildViewById(rootView, id);
      if (tvSubtitle == null) {
        break missingId;
      }

      id = R.id.tvTitle;
      TextView tvTitle = ViewBindings.findChildViewById(rootView, id);
      if (tvTitle == null) {
        break missingId;
      }

      return new ActivityRegisterBinding((ConstraintLayout) rootView, btnBack, btnRegister,
          etConfirmPassword, etContactNumber, etName, etPassword, spinnerRole, tilConfirmPassword,
          tilContactNumber, tilName, tilPassword, tvSubtitle, tvTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
